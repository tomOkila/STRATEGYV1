@page "/manageplandetails"
<PageTitle>STRATEGY | Manage Plan</PageTitle>
<div class="row">
    <div class="col-sm-12 mb-4 mb-xl-0">
        <h4 class="font-weight-bold text-dark">Manage Plan Details</h4>
        <div style="float:right;">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="/home" Text="Home" />
                <RadzenBreadCrumbItem Text="Manage Plan Details" />
            </RadzenBreadCrumb>
        </div>
    </div>

</div>
<RadzenButton Text="Create Plan" Click="CreateClicked" Icon="add" ButtonStyle="Radzen.ButtonStyle.Primary" Size="Radzen.ButtonSize.Small" Style="margin:10px;margin-left:5px;" />
<RadzenDataGrid id="mytable" AllowFiltering="true" AllowColumnResize="true"
                AllowAlternatingRows="false"
                AllowSorting="true"
                AllowMultiColumnSorting="true"
                PageSize="5"
                AllowPaging="true"
                ShowPagingSummary="true"
                SelectionMode="DataGridSelectionMode.Single"
                @bind-Value=@selectedStrategicPlanResponse
                FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive"
                Data="@strategicPlanResponses"
                EmptyText="No strategic plan to display at the moment"
                TItem="StrategicPlanReponse" Style="margin:5px;">
    <Columns>
        <RadzenDataGridColumn TItem="StrategicPlanReponse" Property="StrategicPlanID" Title="ID" Frozen="true" Width="20px" Visible="true" />
        <RadzenDataGridColumn TItem="StrategicPlanReponse" Property="StrategicPlanName" Title="Plan Name" Width="60px" />
        <RadzenDataGridColumn TItem="StrategicPlanReponse" Property="PillarName" Title="Pillar Name" Width="60px" />
        <RadzenDataGridColumn Context="strategicPlanResponses"
                              Filterable="false"
                              Sortable="false"
                              Width="60px"
                              TextAlign="Radzen.TextAlign.Center"
                              Frozen="true"
                              FrozenPosition="Radzen.FrozenColumnPosition.Right"
                              Title="Actions">
            <Template Context="strategicPlanResponses">
                <RadzenButton Icon="visibility" ButtonStyle="Radzen.ButtonStyle.Info" Variant="Radzen.Variant.Flat" Size="Radzen.ButtonSize.Small" Click="@(args =>ViewClicked(strategicPlanResponses))">
                </RadzenButton>
                <RadzenButton Icon="edit" ButtonStyle="Radzen.ButtonStyle.Primary" Variant="Radzen.Variant.Flat" Size="Radzen.ButtonSize.Small" Click="@(args =>EditClicked(strategicPlanResponses))">
                </RadzenButton>
                <RadzenButton Icon="delete" ButtonStyle="Radzen.ButtonStyle.Danger" Variant="Radzen.Variant.Flat" Size="Radzen.ButtonSize.Small" Click="@(args =>DeleteConfirmClicked(strategicPlanResponses))">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@* <ScriptPage></ScriptPage> *@
@code {
    private string SessionName = string.Empty;
    private string SessionEmail = string.Empty;
    private int UserId;
    [CascadingParameter]
    public Task<AuthenticationState>? ClientAuthState { get; set; }
    

    StrategicPlanReponse strategicPlanResponse = new();
    List<StrategicPlanReponse> strategicPlanResponses = new();
    IList<StrategicPlanReponse> selectedStrategicPlanResponse;

    private async Task GetStrategicPlanResponse() => strategicPlanResponses = await strategyService.GetStrategicPlanAsync(UserId);



    protected override async Task OnInitializedAsync()
    {

        try
        {
            var user = (await ClientAuthState).User;
            SessionName = user.Identity.Name;
            SessionEmail = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value;
            UserId = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);

            //load system roles
            await GetStrategicPlanResponse();
            selectedStrategicPlanResponse = new List<StrategicPlanReponse>() { strategicPlanResponses.FirstOrDefault() };
        }
        catch (Exception ex)
        {
            SessionName = null!;
            SessionEmail = null!;
        }

    }

    private void CreateClicked()
    {
        StrategicPlan strategicPlan1 = new StrategicPlan();
        strategicPlan1 = new();
        myStateContainer.SetStrategicPlan(strategicPlan1);
        Navmanager.NavigateTo("manageplan");
    }

    private void EditClicked(StrategicPlanReponse inconStrategicPlanReponse)
    {
        strategicPlanResponse = inconStrategicPlanReponse;
        //ShowInlineDialog();
        //create strategic plan model
        StrategicPlan strategicPlan1 = new StrategicPlan();
        strategicPlan1.StrategicPlanID = strategicPlanResponse.StrategicPlanID;
        strategicPlan1.StrategicPlanName = strategicPlanResponse.StrategicPlanName;
        strategicPlan1.PillarID = strategicPlanResponse.PillarID;
        strategicPlan1.SOId = strategicPlanResponse.SOId;
        strategicPlan1.DetailedId = strategicPlanResponse.DetailedId;
        strategicPlan1.ProgramScheduleId = strategicPlanResponse.ProgramScheduleId;
        strategicPlan1.ProgramScheduleId = strategicPlanResponse.ProgramScheduleId;
        
        myStateContainer.SetStrategicPlan(strategicPlan1);
        Navmanager.NavigateTo("manageplan");

    }

    private void DeleteConfirmClicked(StrategicPlanReponse inconStrategicPlanReponse)
    {
        strategicPlanResponse = inconStrategicPlanReponse;
        ShowInlineDeleteConfirmTaskDialog();
    }

    async Task ShowInlineDeleteConfirmTaskDialog()
    {
        var result = await DialogService1.OpenAsync("Delete Strategic Plan Request? ", ds =>
    @<RadzenStack Gap="0.1rem">
        <p>PlanID: <b>@strategicPlanResponse.StrategicPlanID</b></p>
        <p>Name: <b>@strategicPlanResponse.StrategicPlanName</b></p>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Delete Request" Icon="delete" ButtonStyle="ButtonStyle.Secondary" Click="@(args =>DeleteClicked(strategicPlanResponse))" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" Icon="cancel" ButtonStyle="ButtonStyle.Primary" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
        );
    }

    // private void ViewDeleteClicked(StrategicPlanReponse inconStrategicPlanReponse)
    // {
    //     strategicPlanResponse = inconStrategicPlanReponse;
    //     //ShowInlineDeleteTaskDialog();
    //     //create strategic plan model
    //     StrategicPlan strategicPlan1 = new StrategicPlan();
    //     strategicPlan1.StrategicPlanName = strategicPlanResponse.StrategicPlanName;
    //     strategicPlan1.PillarID = strategicPlanResponse.PillarID;
    //     strategicPlan1.SOId = strategicPlanResponse.SOId;
    //     strategicPlan1.DetailedId = strategicPlanResponse.DetailedId;
    //     strategicPlan1.ProgramScheduleId = strategicPlanResponse.ProgramScheduleId;
    //     strategicPlan1.ProgramScheduleId = strategicPlanResponse.ProgramScheduleId;

    //     myStateContainer.SetStrategicPlan(strategicPlan1);
    //     Navmanager.NavigateTo("manageplan");
    // }

    private void ViewClicked(StrategicPlanReponse inconStrategicPlanReponse)
    {
        strategicPlanResponse = inconStrategicPlanReponse;
        ShowViewInlineDialog();
    }

    async Task ShowViewInlineDialog()
    {
        var result = await DialogService1.OpenAsync("Strategic Plan Display", ds =>
    @<RadzenStack Gap="0.5rem" Style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif, 'Arial Narrow Bold', sans-serif;">
        <RadzenCard Variant=Variant.Filled Style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;font-size:13px;">
            <RadzenLabel><b>PlanID: </b> @strategicPlanResponse.StrategicPlanID</RadzenLabel>
            <br />
            <RadzenLabel><b>Strategic Plan Name: </b> @strategicPlanResponse.StrategicPlanName</RadzenLabel>
            <br />
            <RadzenLabel><b>Pillar Name: </b> @strategicPlanResponse.PillarName</RadzenLabel>
            <br />
            <RadzenLabel><b>Target Name: </b> @strategicPlanResponse.TargetName</RadzenLabel>
            <br />
            <RadzenLabel><b>Detailed Target Name: </b> @strategicPlanResponse.DetailedTargetName</RadzenLabel>
            <br />
            <RadzenLabel><b>Program Registrar Name: </b> @strategicPlanResponse.ProgramRegistrarName</RadzenLabel>
        </RadzenCard>
        <hr />

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Cancel" Icon="cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" />
            </RadzenStack>

        </RadzenStack>
    </RadzenStack>
    );
    }


    public int DeleteId { get; set; }
    private async Task DeleteClicked(StrategicPlanReponse strategicPlanReponse)
    {

        StrategicPlan strategicPlan1 = new StrategicPlan();
        strategicPlan1.StrategicPlanID = strategicPlanResponse.StrategicPlanID;
        strategicPlan1.StrategicPlanName = strategicPlanResponse.StrategicPlanName;
        strategicPlan1.PillarID = strategicPlanResponse.PillarID;
        strategicPlan1.SOId = strategicPlanResponse.SOId;
        strategicPlan1.DetailedId = strategicPlanResponse.DetailedId;
        strategicPlan1.ProgramScheduleId = strategicPlanResponse.ProgramScheduleId;
        strategicPlan1.ProgramScheduleId = strategicPlanResponse.ProgramScheduleId;
        strategicPlan1.UpdatedBy = UserId;

        var response = await strategyService.DeleteStrategicPlanAsync(strategicPlan1);
        if (response.Flag)
        {

            DeleteId = 0;
            StateHasChanged();
            DialogService1.Close();
            await GetStrategicPlanResponse();
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = response.Message, Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });

        }
        else
        {
            await GetStrategicPlanResponse();
            DialogService1.Close();
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = response.Message, Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
        }
    }

    void ShowNotification(Radzen.NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

}
