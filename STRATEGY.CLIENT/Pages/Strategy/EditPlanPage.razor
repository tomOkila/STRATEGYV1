@page "/editplan"
@using System.Net.Http.Headers
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject IConfiguration Configuration

<PageTitle>STRATEGY | Edit Plan</PageTitle>
<div class="row">
    <div class="col-sm-12 mb-4 mb-xl-0">
        <h4 class="font-weight-bold text-dark">Edit Plan</h4>
        <div style="float:right;">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="/theplan" Text="Home" />
                <RadzenBreadCrumbItem Text="Edit Plan" />
            </RadzenBreadCrumb>
        </div>
    </div>

</div>
<div class="card card-primary">
    <div class="card-header text-white" Style="background-color: #EC37FC;font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif">
        @* <h3 class="card-title"><i class="fas fa-user-plus"></i> Create Strategic Plan</h3> *@
    </div>
    <!-- /.card-header -->
    <div class="card-body">
        <RadzenStack>
            <RadzenTemplateForm TItem="EditPlan" Data=editPlan Submit="Save" InvalidSubmit="OnInvalidSubmit">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="User Name: " Style="font-weight:bold;color:black" />
                            <RadzenTextBox Disabled Name="UserName" @bind-Value=editPlan.UserName />
                            <RadzenRequiredValidator Component="UserName" Text="User Name is required" />
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack>
                            <RadzenStack Gap="0.1rem">
                                <RadzenLabel Text="Pillar: " Style="font-weight:bold;color:black;padding:0px;margin:0px;" />
                                <!--Dropdown Input Field-->
                                <RadzenDropDown Data=@pillars
                                                @bind-Value=editPlan.PillarID
                                                TextProperty="PillarName"
                                                AllowFiltering="true"
                                                FilterAsYouType="true"
                                                FilterPlaceholder="Select Pillar Name"
                                                Placeholder="Select Pillar Name"
                                                ValueProperty="PillarID"
                                                Name="PillarName"
                                                Style="font-weight:bold">
                                </RadzenDropDown>
                                <RadzenRequiredValidator DefaultValue=0 Component="PillarName" Text="Pillar Name is required." />
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack>
                            <RadzenStack Gap="0.1rem">
                                <RadzenLabel Text="Department: " Style="font-weight:bold;color:black;padding:0px;margin:0px;" />
                                <!--Dropdown Input Field-->
                                <RadzenDropDown Disabled Data=@departments
                                                @bind-Value=SessionDepartmentID
                                                TextProperty="DepartmentName"
                                                AllowFiltering="true"
                                                FilterAsYouType="true"
                                                FilterPlaceholder="Select Department Name"
                                                Placeholder="Select Department Name"
                                                ValueProperty="DepartmentId"
                                                Name="DepartmentName"
                                                Style="font-weight:bold">
                                </RadzenDropDown>
                                <RadzenRequiredValidator DefaultValue=0 Component="DepartmentName" Text="Department Name is required." />
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Strategic Objectives: " Style="font-weight:bold;color:black;padding:0px;margin:0px;" />
                            <!--Dropdown Input Field-->
                            <RadzenDropDown Data=@strategicObjectives.Where(x => x.PillarId == editPlan.PillarID)
                                            @bind-Value=editPlan.SOId
                                            TextProperty="TargetName"
                                            AllowFiltering="true"
                                            FilterAsYouType="true"
                                            FilterPlaceholder="Select Strategic Objectives"
                                            Placeholder="Select Strategic Objectives"
                                            ValueProperty="SOId"
                                            Name="TargetName"
                                            Style="font-weight:bold">
                            </RadzenDropDown>
                            <RadzenRequiredValidator DefaultValue=0 Component="TargetName" Text="Target Name is required." />
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack>
                            <RadzenStack Gap="0.1rem">
                                <RadzenLabel Text="Detailed Strategic Objectives: " Style="font-weight:bold;color:black;padding:0px;margin:0px;" />
                                <!--Dropdown Input Field-->
                                <RadzenDropDown Data=@detailedSOs.Where(x => x.SOId == editPlan.SOId)
                                                @bind-Value=editPlan.DetailedId
                                                TextProperty="DetailedTargetName"
                                                AllowFiltering="true"
                                                FilterAsYouType="true"
                                                FilterPlaceholder="Select Detailed Target Name"
                                                Placeholder="Select Detailed Target Name"
                                                ValueProperty="DetailedId"
                                                Name="DetailedTargetName"
                                                Style="font-weight:bold">
                                </RadzenDropDown>
                                <RadzenRequiredValidator DefaultValue=0 Component="DetailedTargetName" Text="Detailed TargetName is required." />
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenColumn>

                </RadzenRow>
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Program Schedule: " Style="font-weight:bold;color:black;padding:0px;margin:0px;" />
                            <!--Dropdown Input Field-->
                            <RadzenDropDown Data=@programSchedules.Where(x => x.DetailedId == editPlan.DetailedId)
                                            @bind-Value=editPlan.ProgramScheduleId
                                            TextProperty="ProgramRegistrarName"
                                            AllowFiltering="true"
                                            FilterAsYouType="true"
                                            FilterPlaceholder="Select Program Schedule"
                                            Placeholder="Select Program Schedule"
                                            ValueProperty="ProgramScheduleId"
                                            Name="ProgramRegistrarName"
                                            Style="font-weight:bold">
                            </RadzenDropDown>
                            <RadzenRequiredValidator DefaultValue=0 Component="ProgramRegistrarName" Text="Program Schedule is required." />
                        </RadzenStack>
                    </RadzenColumn>

                    <RadzenStack Gap="1rem" Style="margin:5px;">
                        <RadzenColumn Size="6" SizeSM="6">
                            <RadzenCard Variant="Variant.Outlined">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Drag and drop files to upload</RadzenText>
                                @*      <InputFile OnChange="@SingleUpload4" style="margin-bottom:15px;" /> *@
                                <InputFile OnChange="OnInputFileChange" multiple />
                                <hr />

                                <ul>
                                    @if (fileNames.Count > 0)
                                    {
                                        @foreach (var fileName in fileNames)
                                        {
                                            <li>
                                                File: @fileName <br>
                                                <span> Stored FileName: @GetStoredFileName(fileName) </span>
                                            </li>
                                        }
                                    }
                                </ul>
                                @*  <RadzenImage Path=@editPlan.Witness Style="width: 15rem;" AlternateText="" /> *@
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenStack>
                </RadzenRow>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Strategic Performance Indicators: " Style="font-weight:bold;color:black" />
                            <RadzenTextBox Name="StraKeyPerfIndicators" @bind-Value=editPlan.StraKeyPerfIndicators />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="StraKeyPerfIndicators" Text="Strategic Performance Indicators is required" />
                        </RadzenStack>
                    </RadzenColumn>

                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Key Performance Indicator Evaluation: " Style="font-weight:bold;color:black" />
                            <RadzenTextBox Name="KeyPerfIndicatorsEvaluation" @bind-Value=editPlan.KeyPerfIndicatorsEvaluation />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="KeyPerfIndicatorsEvaluation" Text="Key Performance Indicator Evaluation is required." />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Target Group: " Style="font-weight:bold;color:black" />
                            <RadzenTextBox Name="TargetGroup" @bind-Value=editPlan.TargetGroup />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="TargetGroup" Text="Target Group is required" />
                        </RadzenStack>
                    </RadzenColumn>

                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Targeted: " Style="font-weight:bold;color:black" />
                            <RadzenTextBox Name="Targeted" @bind-Value=editPlan.Targeted />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="Targeted" Text="Targeted is required." />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Actual Performance: " Style="font-weight:bold;color:black" />
                            <RadzenTextBox Name="ActualPerformance" @bind-Value=editPlan.ActualPerformance />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="ActualPerformance" Text="Actual Performance is required" />
                        </RadzenStack>
                    </RadzenColumn>

                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Actual Implementation Steps" Style="font-weight:bold;color:black" />
                            <RadzenTextBox Name="ActImpSteps" @bind-Value=editPlan.ActImpSteps />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="ActImpSteps" Text="Actual Implementation Steps is required." />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Executive Activity Analysis: " Style="font-weight:bold;color:black" />
                            <RadzenTextBox Name="ExeActivityAnalysis" @bind-Value=editPlan.ExeActivityAnalysis />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="ExeActivityAnalysis" Text="Executive Activity Analysis is required" />
                        </RadzenStack>
                    </RadzenColumn>

                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Entity Responsible" Style="font-weight:bold;color:black" />
                            <RadzenTextBox Name="EntityResponsible" @bind-Value=editPlan.EntityResponsible />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="EntityResponsible" Text="Entity Responsible is required." />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Participating Parties" Style="font-weight:bold;color:black" />
                            <RadzenTextBox Name="PartParties" @bind-Value=editPlan.PartParties />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="PartParties" Text="Participating Parties is required" />
                        </RadzenStack>
                    </RadzenColumn>

                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Implementation Start Date" Style="font-weight:bold;color:black" />
                            <RadzenDatePicker Name="ImpStartDate" @bind-Value=editPlan.ImpStartDate />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="ImpStartDate" Text="Implementation Start Date is required." />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>


                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Completion Date" Style="font-weight:bold;color:black" />
                            <RadzenDatePicker Name="CompletionDate" @bind-Value=editPlan.CompletionDate />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="CompletionDate" Text="Completion Date is required" />
                        </RadzenStack>
                    </RadzenColumn>

                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Proposed Cost" Style="font-weight:bold;color:black" />
                            <RadzenNumeric Name="ProposedCost" @bind-Value=editPlan.ProposedCost />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="ProposedCost" Text="Proposed Cost is required." />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Estimated Cost" Style="font-weight:bold;color:black" />
                            <RadzenNumeric Name="EstimatedCost" @bind-Value=editPlan.EstimatedCost />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="EstimatedCost" Text="Estimated Cost is required" />
                        </RadzenStack>
                    </RadzenColumn>

                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Actual Cost" Style="font-weight:bold;color:black" />
                            <RadzenNumeric Name="ActualCost" @bind-Value=editPlan.ActualCost />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="ProposedCost" Text="Actual Cost is required." />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow Gap="1rem">

                      <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack>
                            <RadzenStack Gap="0.1rem">
                                <RadzenLabel Text="Initiative Status: " Style="font-weight:bold;color:black;padding:0px;margin:0px;" />
                                <!--Dropdown Input Field-->
                                <RadzenDropDown Data=@InitiativeStatusList
                                                @bind-Value=editPlan.InitiativeStatus
                                                TextProperty="InitiativeStatusName"
                                                AllowFiltering="true"
                                                FilterAsYouType="true"
                                                FilterPlaceholder="Initiative Status"
                                                Placeholder="Initiative Status"
                                                ValueProperty="InitiativeStatusID"
                                                Name="InitiativeStatusName"
                                                Style="font-weight:bold">
                                </RadzenDropDown>
                                <RadzenRequiredValidator DefaultValue=0 Component="InitiativeStatusName" Text="Detailed TargetName is required." />
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Evidence" Style="font-weight:bold;color:black" />
                            <RadzenTextArea Name="Evidence" @bind-Value=editPlan.Evidence />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="Evidence" Text="Evidence is required" />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Witness" Style="font-weight:bold;color:black" />
                            <RadzenTextArea Name="WitnessDetail" @bind-Value=editPlan.WitnessDetail />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="WitnessDetail" Text="Witness is required" />
                        </RadzenStack>
                    </RadzenColumn>

                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenStack Gap="0.1rem">
                            <RadzenLabel Text="Section Comment" Style="font-weight:bold;color:black" />
                            <RadzenTextArea Name="SectionComment" @bind-Value=editPlan.SectionComment />
                            <RadzenRequiredValidator Style="font-weight:bold" Component="SectionComment" Text="Section Comment is required" />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6" SizeSM="6">
                        <RadzenFormField Text="Strategic Objectives  Visibility" Variant="Variant.Outlined">
                            <RadzenRadioButtonList @bind-Value=editPlan.StrategicObjectivesVisibility TValue="bool" class="rz-m-8 rz-mt-12">
                                <Items>
                                    <RadzenRadioButtonListItem Text="True" Value="true" />
                                    <RadzenRadioButtonListItem Text="False" Value="false" />
                                </Items>
                            </RadzenRadioButtonList>
                        </RadzenFormField>
                    </RadzenColumn>

                    <RadzenColumn Size="6" SizeSM="6">
                            <RadzenFormField Text="Detailed  Objectives  Visibility" Variant="Variant.Outlined">
                            <RadzenRadioButtonList @bind-Value=editPlan.DetailedStrategicObjectivesVisibility TValue="bool" class="rz-m-8 rz-mt-12">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="True" Value="true" />
                                        <RadzenRadioButtonListItem Text="False" Value="false" />
                                    </Items>
                                </RadzenRadioButtonList>
                            </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>


                <RadzenButton Style="margin-top:20px;" Icon="save" ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
            </RadzenTemplateForm>
        </RadzenStack>
    </div>
    <!-- /.card-body -->
    <div class="card-footer">
    </div>
</div>
@code {
    private string SessionName = string.Empty;
    private string SessionEmail = string.Empty;
    private int SessionDepartmentID;
    private int UserId;
    [CascadingParameter]
    public Task<AuthenticationState>? ClientAuthState { get; set; }


    Plan plan = new();
    List<Plan> plans = new();
    IList<Plan> selectedPlans;

    EditPlan editPlan = new();
    List<EditPlan> editPlans = new();


    PlanResponse planResponse = new();
    List<PlanResponse> planResponses = new();

    Pillar pillar = new();
    List<Pillar> pillars = new();

    StrategicObjective strategicObjective = new();
    List<StrategicObjective> strategicObjectives = new();

    DetailedSO detailedSO = new();
    List<DetailedSO> detailedSOs = new();

    ProgramSchedule programSchedule = new();
    List<ProgramSchedule> programSchedules = new();

    Department department = new();
    List<Department> departments = new();


    //add initative status

    IList<InitiativeStatus> InitiativeStatusList = new List<InitiativeStatus>() {
                new InitiativeStatus(){ InitiativeStatusID=1, InitiativeStatusName="INPROGRESS"},
                new InitiativeStatus(){ InitiativeStatusID=2, InitiativeStatusName="DO"},
                new InitiativeStatus(){ InitiativeStatusID=3, InitiativeStatusName="POSTPONED"},
                                };


    private List<string> fileNames = new();
    private long maxFileSize = long.MaxValue;
    private int maxAllowedFiles = int.MaxValue;
    private List<UploadResult> uploadResults = new();
    public string mySetting { get; set; } = string.Empty;


    private async Task GetPlans() => planResponses = await strategyService.GetPlanAsync(UserId);
    private async Task GetPillars() => pillars = await strategyService.GetPillarAsync(UserId);
    private async Task GetStrategicObjectives() => strategicObjectives = await strategyService.GetStrategicObjectivesAsync(UserId);
    private async Task GetDetailedStrategicObjectives() => detailedSOs = await strategyService.GetDetailedStrategicObjectivesAsync(UserId);
    private async Task GetProgramSchedule() => programSchedules = await strategyService.GetProgramScheduleAsync(UserId);
    private async Task GetDepartments() => departments = await strategyService.GetDepartmentAsync(UserId);


    protected override async Task OnInitializedAsync()
    {

        try
        {
            var user = (await ClientAuthState).User;
            SessionName = user.Identity.Name;
            SessionEmail = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value;
            UserId = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);
            SessionDepartmentID = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Surname).Value);

            //load system roles
            await GetPlans();
            await GetPillars();
            await GetStrategicObjectives();
            await GetDetailedStrategicObjectives();
            await GetProgramSchedule();
            await GetDepartments();

        }
        catch (Exception ex)
        {
            SessionName = null!;
            SessionEmail = null!;
        }


        base.OnInitialized();
        plan = myStateContainer.PlanValue;
        if (plan.PlanID > 0)
        {
            editPlan.PlanID = plan.PlanID;
            editPlan.UserName = plan.UserName;
            editPlan.DepartmentID = plan.DepartmentID;
            editPlan.PillarID = plan.PillarID;
            editPlan.SOId = plan.SOId;
            editPlan.DetailedId = plan.DetailedId;
            editPlan.ProgramScheduleId = plan.ProgramScheduleId;
            editPlan.Witness = plan.Witness;
            editPlan.StraKeyPerfIndicators = plan.StraKeyPerfIndicators;
            editPlan.KeyPerfIndicatorsEvaluation = plan.KeyPerfIndicatorsEvaluation;
            editPlan.TargetGroup = plan.TargetGroup;
            editPlan.Targeted = plan.Targeted;
            editPlan.ActualPerformance = plan.ActualPerformance;
            editPlan.ActImpSteps = plan.ActImpSteps;
            editPlan.ExeActivityAnalysis = plan.ExeActivityAnalysis;
            editPlan.EntityResponsible = plan.EntityResponsible;
            editPlan.PartParties = plan.PartParties;
            editPlan.ImpStartDate = plan.ImpStartDate;
            editPlan.CompletionDate = plan.CompletionDate;
            editPlan.ProposedCost = plan.ProposedCost;
            editPlan.EstimatedCost = plan.EstimatedCost;
            editPlan.ActualCost = plan.ActualCost;
            editPlan.InitiativeStatus = plan.InitiativeStatus;
            editPlan.Evidence = plan.Evidence;
            editPlan.WitnessDetail = plan.WitnessDetail;
            editPlan.SectionComment = plan.SectionComment;
            editPlan.TeamComment = plan.TeamComment;
            editPlan.SupervisorReview = plan.SupervisorReview;
            editPlan.StrategicObjectivesVisibility = plan.StrategicObjectivesVisibility;
            editPlan.DetailedStrategicObjectivesVisibility = plan.DetailedStrategicObjectivesVisibility;
        }
        else
        {
            editPlan.UserName = SessionName!;
        }

    }


    private async Task SingleUpload4(InputFileChangeEventArgs e)
    {
        string base64String = "";
        try
        {
            await using MemoryStream fs = new MemoryStream();
            await e.File.OpenReadStream(maxAllowedSize: 5048576).CopyToAsync(fs);
            byte[] somBytes = GetBytes(fs);
            base64String = Convert.ToBase64String(somBytes, 0, somBytes.Length);
            editPlan.Witness = base64String;
            //editPlan.WitnessName = e.File.Name;

            System.Diagnostics.Debug.Print("Imatge 64: " + base64String + Environment.NewLine);
        }

        catch (Exception ex)
        {
            System.Diagnostics.Debug.Print("ERROR: " + ex.Message + Environment.NewLine);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ToString(), Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
        }
    }

    public static byte[] GetBytes(Stream stream)
    {
        var bytes = new byte[stream.Length];
        stream.Seek(0, SeekOrigin.Begin);
        stream.ReadAsync(bytes, 0, bytes.Length);
        stream.Dispose();
        return bytes;
    }


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        fileNames.Clear();

        try
        {
            using var content = new MultipartFormDataContent();
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                fileNames.Add(file.Name);
                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name
                );
            }

            var response = await httpClient.PostAsync(mySetting, content);
            var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

            //clear list first before adding new items
            uploadResults.Clear();

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
            }
        }
        catch (Exception ex)
        {

            throw;
        }

    }

    protected override void OnInitialized()
    {
        mySetting = Configuration.GetValue<string>("ConnectionStrings:HTTPCLIENTURL");
    }


    private string? GetStoredFileName(string fileName)
    {
        var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
        if (uploadResult is not null)
        {
            return uploadResult.StoredFileName;
        }
        else
        {
            return "File not found";
        }
    }


    async Task Save()
    {

        editPlan.DepartmentID = SessionDepartmentID;
        editPlan.UserName = SessionName;
        editPlan.WitnessName = fileNames;

        try
        {
            if (string.IsNullOrEmpty(editPlan.UserName))
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"Please supply all plan details before proceeding.", Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
                return;
            }

            // if (editPlan.WitnessName.Count == 0)
            // {
            //     ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"Atleast one file needs to be loaded to proceed.", Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
            //     return;
            // }


            var response = new GeneralResponse(false, null!);
            if (editPlan.PlanID > 0)
                response = await strategyService.UpdatePlanAsync(editPlan);
            else
                response = await strategyService.CreatePlanAsync(editPlan);

            if (!response.Flag)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = response.Message, Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
                return;
            }
            else
            {
                DialogService1.Close();
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = response.Message, Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
                await GetPlans();
                plan = new();
                Navmanager.NavigateTo("theplan");
            }
        }
        catch (Exception ex)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ToString(), Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
            return;
        }


    }



    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}", Detail = "", Duration = 2000, CloseOnClick = true, Payload = DateTime.Now });
    }

    void ShowNotification(Radzen.NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

}
