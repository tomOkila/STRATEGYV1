@page "/viewimageplan"
<PageTitle>STRATEGY | The Plan Documents</PageTitle>
<div class="row">
    <div class="col-sm-12 mb-4 mb-xl-0">
        <h4 class="font-weight-bold text-dark">Plan Documents </h4>
        <div style="float:right;">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="/home" Text="Home" />
                <RadzenBreadCrumbItem Text="The Plan - Documents" />
            </RadzenBreadCrumb>
        </div>
    </div>
</div>


<RadzenTabs @bind-SelectedIndex=@selectedIndex>
    <Tabs>
        <RadzenTabsItem Text="Plan Details">
            <RadzenCard Variant=Variant.Filled Style="margin:5px;">
                <RadzenText TextStyle="TextStyle.H6"><strong>Plan Information</strong></RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">PlanID</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.PlanID</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">UserName</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.UserName</b></RadzenText>
                    </RadzenColumn>
                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Target Group</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.TargetGroup</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Targeted</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.Targeted</b></RadzenText>
                    </RadzenColumn>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">

                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Key Performance Indicators</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.StraKeyPerfIndicators</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Key Performance Evaluation</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.KeyPerfIndicatorsEvaluation</b></RadzenText>
                    </RadzenColumn>
                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Executive Activity Analysis</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.ExeActivityAnalysis</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Entity Responsible</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.EntityResponsible</b></RadzenText>
                    </RadzenColumn>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">

                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Actual Performance</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.ActualPerformance</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Actual Implementation Steps</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.ActImpSteps</b></RadzenText>
                    </RadzenColumn>
                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Participating Parties</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.PartParties</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Implementation StartDate</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.ImpStartDate</b></RadzenText>
                    </RadzenColumn>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Completion Date</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.CompletionDate</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Proposed Cost</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.ProposedCost</b></RadzenText>
                    </RadzenColumn>

                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Initiative Status</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@InitiativeStatusList.Where(x=>x.InitiativeStatusID==editPlan.InitiativeStatus).FirstOrDefault().InitiativeStatusName</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Evidence</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.Evidence</b></RadzenText>
                    </RadzenColumn>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">

                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Estimated Cost</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.EstimatedCost</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Actual Cost</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.ActualCost</b></RadzenText>
                    </RadzenColumn>

                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">TeamComment</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.TeamComment</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">SupervisorReview</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.SupervisorReview</b></RadzenText>
                    </RadzenColumn>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">

                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">WitnessDetail</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.WitnessDetail</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">SectionComment</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@editPlan.SectionComment</b></RadzenText>
                    </RadzenColumn>
                </RadzenStack>

            </RadzenCard>

            <RadzenCard Variant=Variant.Filled Style="margin:5px;">
                <RadzenText TextStyle="TextStyle.H6"><strong>Department Details</strong></RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
                    <RadzenStack Gap="0">
                        @foreach (var item in departments.Where(x => x.DepartmentId == editPlan.DepartmentID))
                        {
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">DepartmentID</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.DepartmentId</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">DepartmentName</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.DepartmentName</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">DepartmentManager</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.DepartmentManager</b></RadzenText>
                        }

                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>

            <RadzenCard Variant=Variant.Filled Style="margin:5px;">
                <RadzenText TextStyle="TextStyle.H6"><strong>Pillar Details</strong></RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
                    <RadzenStack Gap="0">
                        @foreach (var item in pillars.Where(x => x.PillarID == editPlan.PillarID))
                        {
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">PillarID</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.PillarID</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">PillarName</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.PillarName</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">PillarRecorder</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.PillarRecorder</b></RadzenText>
                        }

                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
            <RadzenCard Variant=Variant.Filled Style="margin:5px;">
                <RadzenText TextStyle="TextStyle.H6"><strong>Strategic Objectives Details</strong></RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
                    <RadzenStack Gap="0">
                        @foreach (var item in strategicObjectives.Where(x => x.SOId == editPlan.SOId))
                        {
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">StrategicID</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.SOId</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">TargetName</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.TargetName</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">GoalScorerName</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.GoalScorerName</b></RadzenText>
                        }

                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>

            <RadzenCard Variant=Variant.Filled Style="margin:5px;">
                <RadzenText TextStyle="TextStyle.H6"><strong>Detailed Strategic Objectives Details</strong></RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
                    <RadzenStack Gap="0">
                        @foreach (var item in detailedSOs.Where(x => x.DetailedId == editPlan.DetailedId))
                        {
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">DetailedStrategicID</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.DetailedId</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">TargetName</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.DetailedTargetName</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Detailed TargetHistory</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.DetailedTargetHistory</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Detailed ScorerName</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.DetailedScorerName</b></RadzenText>
                        }

                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>

            <RadzenCard Variant=Variant.Filled Style="margin:5px;">
                <RadzenText TextStyle="TextStyle.H6"><strong>Program Schedule</strong></RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
                    <RadzenStack Gap="0">
                        @foreach (var item in programSchedules.Where(x => x.ProgramScheduleId == editPlan.ProgramScheduleId))
                        {
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">ProgramScheduleId</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.ProgramScheduleId</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">TargetName</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.RegistrationDate</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Detailed TargetHistory</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@item.ProgramRegistrarName</b></RadzenText>
                        }

                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>

            @if (SessionRoleID == 4 || SessionRoleID == 5)
            {
                <RadzenTemplateForm TItem="Plan" Data=plan Submit="Save" InvalidSubmit="OnInvalidSubmit">
                    <RadzenRow Gap="1rem">
                        @if (SessionRoleID == 4)
                        {
                            <RadzenColumn Size="12" SizeSM="12">
                                <RadzenStack Gap="0.1rem">
                                    <RadzenLabel Text="Team Comment" Style="font-weight:bold;color:black" />
                                    <RadzenTextArea Name="TeamComment" @bind-Value=plan.TeamComment />
                                    <RadzenRequiredValidator Style="font-weight:bold" Component="TeamComment" Text="Team Comment is required" />
                                </RadzenStack>
                            </RadzenColumn>
                        }

                        @if (SessionRoleID == 5)
                        {
                            <RadzenColumn Size="12" SizeSM="12">
                                <RadzenStack Gap="0.1rem">
                                    <RadzenLabel Text="Supervisor Review" Style="font-weight:bold;color:black" />
                                    <RadzenTextArea Name="SupervisorReview" @bind-Value=plan.SupervisorReview />
                                    <RadzenRequiredValidator Style="font-weight:bold" Component="SupervisorReview" Text="Supervisor Review is required" />
                                </RadzenStack>
                            </RadzenColumn>
                        }
                    </RadzenRow>
                    <RadzenButton Style="margin-top:20px;" Icon="save" ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                </RadzenTemplateForm>
            }
         


        </RadzenTabsItem>
        <RadzenTabsItem Text="Documents">
        @*     <div class="row">
                <div class="rz-p-12 rz-text-align-center">
                    @foreach (var item in planDocuments)
                    {
                       
                        <li><p><RadzenLink Path=@item.DocumentPath Style="width: 15rem;font-weight:bold;" Text=@item.DocumentName target="_blank" /></p></li><br />
                    }
                </div>
            </div> *@
            @* <li><p><RadzenLink Path=@item.DocumentPath Style="width: 15rem;font-weight:bold;" Text=@item.DocumentName target="_blank" /></p></li><br /> *@
            <RadzenDataGrid id="mytable" AllowFiltering="true" AllowColumnResize="true"
                            AllowAlternatingRows="false"
                            AllowSorting="true"
                            AllowMultiColumnSorting="true"
                            PageSize="5"
                            Data="@planDocuments"
                            AllowPaging="true"
                            ShowPagingSummary="true"
                            SelectionMode="DataGridSelectionMode.Single"
                            FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive"
                            EmptyText="No plan documents to display at the moment"
                            TItem="PlanDocuments" Style="margin:5px;">
                <Columns>
                    <RadzenDataGridColumn TItem="PlanDocuments" Property="PlanDocumentId" Title="ID" Frozen="true" Width="30px" Visible="true" />
                    <RadzenDataGridColumn TItem="PlanDocuments" Property="DocumentName" Title="Name" Width="70px" />
                    <RadzenDataGridColumn TItem="PlanDocuments" Title="Details Link">
                        <Template Context="item">
                            <RadzenLink Path=@item.DocumentPath Style="width: 15rem;font-weight:bold;" Text=@item.DocumentName target="_blank" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Context="planDocuments"
                                          Filterable="false"
                                          Sortable="false"
                                          Width="70px"
                                          TextAlign="Radzen.TextAlign.Center"
                                          Frozen="true"
                                          FrozenPosition="Radzen.FrozenColumnPosition.Right"
                                          Title="Actions">
                        <Template Context="PlanDocuments">
                            <RadzenButton Style="margin:5px;" Icon="delete" ButtonStyle="Radzen.ButtonStyle.Danger" Variant="Radzen.Variant.Flat" Size="Radzen.ButtonSize.Small" Click="@(args => ViewDeleteClicked(PlanDocuments))">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>



@code {
    private string SessionName = string.Empty;
    private string SessionEmail = string.Empty;
    private int SessionDepartmentID;
    private int UserId;
    private int SessionRoleID;
    int selectedIndex = 0;

    [CascadingParameter]
    public Task<AuthenticationState>? ClientAuthState { get; set; }

    Plan plan = new();
    List<Plan> plans = new();
    IList<Plan> selectedPlans;

    EditPlanDocument editPlan = new();
    List<EditPlanDocument> editPlans = new();

    EditPlan editPlanComment = new();
    List<EditPlan> editPlanComments = new();
    private List<string> fileNames = new();

    PlanDocuments planDocument = new();
    List<PlanDocuments> planDocuments = new();

    Department department = new();
    List<Department> departments = new();

    Pillar pillar = new();
    List<Pillar> pillars = new();

    StrategicObjective strategicObjective = new();
    List<StrategicObjective> strategicObjectives = new();

    DetailedSO detailedSO = new();
    List<DetailedSO> detailedSOs = new();

    ProgramSchedule programSchedule = new();
    List<ProgramSchedule> programSchedules = new();

    //add initative status

    IList<InitiativeStatus> InitiativeStatusList = new List<InitiativeStatus>() {
                new InitiativeStatus(){ InitiativeStatusID=1, InitiativeStatusName="INPROGRESS"},
                new InitiativeStatus(){ InitiativeStatusID=2, InitiativeStatusName="DO"},
                new InitiativeStatus(){ InitiativeStatusID=3, InitiativeStatusName="POSTPONED"},
                                };


    private async Task GetPlanDocuments() => planDocuments = await strategyService.GetPlanDocumentsAsync(editPlan);
    private async Task GetDepartments() => departments = await strategyService.GetDepartmentAsync(UserId);
    private async Task GetPillars() => pillars = await strategyService.GetPillarAsync(UserId);
    private async Task GetStrategicObjectives() => strategicObjectives = await strategyService.GetStrategicObjectivesAsync(UserId);
    private async Task GetDetailedStrategicObjectives() => detailedSOs = await strategyService.GetDetailedStrategicObjectivesAsync(UserId);
    private async Task GetProgramSchedule() => programSchedules = await strategyService.GetProgramScheduleAsync(UserId);

    protected override async Task OnInitializedAsync()
    {

        try
        {
            var user = (await ClientAuthState).User;
            SessionName = user.Identity.Name;
            SessionEmail = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value;
            UserId = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);
            SessionRoleID = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role).Value);
            SessionDepartmentID = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Surname).Value);
        }
        catch (Exception ex)
        {
            SessionName = null!;
            SessionEmail = null!;
        }


        base.OnInitialized();
        plan = myStateContainer.PlanValue;
        if (plan.PlanID > 0)
        {
            editPlan.PlanID = plan.PlanID;
            editPlan.UserName = plan.UserName;
            editPlan.DepartmentID = plan.DepartmentID;
            editPlan.PillarID = plan.PillarID;
            editPlan.SOId = plan.SOId;
            editPlan.DetailedId = plan.DetailedId;
            editPlan.ProgramScheduleId = plan.ProgramScheduleId;
            editPlan.Witness = "test";

            editPlan.StraKeyPerfIndicators = plan.StraKeyPerfIndicators;
            editPlan.KeyPerfIndicatorsEvaluation = plan.KeyPerfIndicatorsEvaluation;
            editPlan.TargetGroup = plan.TargetGroup;
            editPlan.Targeted = plan.Targeted;
            editPlan.ActualPerformance = plan.ActualPerformance;
            editPlan.ActImpSteps = plan.ActImpSteps;
            editPlan.ExeActivityAnalysis = plan.ExeActivityAnalysis;
            editPlan.EntityResponsible = plan.EntityResponsible;
            editPlan.PartParties = plan.PartParties;
            editPlan.ImpStartDate = plan.ImpStartDate;
            editPlan.CompletionDate = plan.CompletionDate;
            editPlan.ProposedCost = plan.ProposedCost;
            editPlan.EstimatedCost = plan.EstimatedCost;
            editPlan.ActualCost = plan.ActualCost;
            editPlan.InitiativeStatus = plan.InitiativeStatus;
            editPlan.Evidence = plan.Evidence;
            editPlan.WitnessDetail = plan.WitnessDetail;
            editPlan.SectionComment = plan.SectionComment;
            editPlan.TeamComment = plan.TeamComment;
            editPlan.SupervisorReview = plan.SupervisorReview;


            editPlan.UpdatedBy = UserId;

           
        }
        else
        {
            editPlan.UserName = SessionName!;
        }


        await GetPlanDocuments();
        await GetDepartments();
        await GetPillars();
        await GetStrategicObjectives();
        await GetDetailedStrategicObjectives();
        await GetProgramSchedule();


    }


    async Task Save()
    {

        editPlanComment.DepartmentID = SessionDepartmentID;
        editPlanComment.UserName = SessionName;

        
        foreach (var item in planDocuments)
        {
            fileNames.Add(item.DocumentName);
        }
        editPlanComment.WitnessName = fileNames;
        editPlanComment.UserName = editPlan.UserName;

        editPlanComment.PlanID = editPlan.PlanID;
        editPlanComment.PillarID = editPlan.PillarID;
        editPlanComment.SOId = editPlan.SOId;
        editPlanComment.DetailedId = editPlan.DetailedId;
        editPlanComment.ProgramScheduleId = editPlan.ProgramScheduleId;
        editPlanComment.Witness = "test";

        editPlanComment.StraKeyPerfIndicators = editPlan.StraKeyPerfIndicators;
        editPlanComment.KeyPerfIndicatorsEvaluation = editPlan.KeyPerfIndicatorsEvaluation;
        editPlanComment.TargetGroup = editPlan.TargetGroup;
        editPlanComment.Targeted = editPlan.Targeted;
        editPlanComment.ActualPerformance = editPlan.ActualPerformance;
        editPlanComment.ActImpSteps = editPlan.ActImpSteps;
        editPlanComment.ExeActivityAnalysis = editPlan.ExeActivityAnalysis;
        editPlanComment.EntityResponsible = editPlan.EntityResponsible;
        editPlanComment.PartParties = editPlan.PartParties;
        editPlanComment.ImpStartDate = editPlan.ImpStartDate;
        editPlanComment.CompletionDate = editPlan.CompletionDate;
        editPlanComment.ProposedCost = editPlan.ProposedCost;
        editPlanComment.EstimatedCost = editPlan.EstimatedCost;
        editPlanComment.ActualCost = editPlan.ActualCost;
        editPlanComment.InitiativeStatus = editPlan.InitiativeStatus;
        editPlanComment.Evidence = editPlan.Evidence;
        editPlanComment.WitnessDetail = editPlan.WitnessDetail;
        editPlanComment.SectionComment = editPlan.SectionComment;
        editPlanComment.TeamComment = plan.TeamComment;
        editPlanComment.SupervisorReview = plan.SupervisorReview;

        try
        {
            if (string.IsNullOrEmpty(editPlanComment.UserName))
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"Please supply all plan details before proceeding.", Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
                return;
            }

            // if (editPlanComment.WitnessName.Count == 0)
            // {
            //     ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"Atleast one file needs to be loaded to proceed.", Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
            //     return;
            // }


            var response = new GeneralResponse(false, null!);
            if (editPlanComment.PlanID > 0)
                response = await strategyService.UpdatePlanAsync(editPlanComment);
            else
                response = await strategyService.CreatePlanAsync(editPlanComment);

            if (!response.Flag)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = response.Message, Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
                return;
            }
            else
            {
                DialogService1.Close();
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = response.Message, Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
                Navmanager.NavigateTo("theplan");
            }
        }
        catch (Exception ex)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ToString(), Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
            return;
        }


    }


    private void ViewDeleteClicked(PlanDocuments incoPlanDocuments)
    {
        planDocument = incoPlanDocuments;
        ShowInlineDeleteTaskDialog();
    }


    async Task ShowInlineDeleteTaskDialog()
    {
        var result = await DialogService1.OpenAsync("Delete Plan Document? ", ds =>
    @<RadzenStack Gap="0.1rem">
    <p style="font-size:20px;">Name: <b>@planDocument.DocumentName</b></p>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Secondary" Click="@(args => DeleteClicked(planDocument))" />
            <RadzenButton Text="Cancel" Click="() => ds.Close(false)" Icon="cancel" ButtonStyle="ButtonStyle.Primary" />
        </RadzenStack>
    </RadzenStack>
</RadzenStack>
    );
    }

    public int DeleteId { get; set; }
    private async Task DeleteClicked(PlanDocuments model)
    {
        var response = await strategyService.DeletePlanDocumentAsync(model);
        await GetPlanDocuments();
        DeleteId = 0;
        StateHasChanged();
        DialogService1.Close();
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = response.Message, Detail = "", Duration = 8000, CloseOnClick = true, Payload = DateTime.Now });
    }


    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}", Detail = "", Duration = 2000, CloseOnClick = true, Payload = DateTime.Now });
    }

    void ShowNotification(Radzen.NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
