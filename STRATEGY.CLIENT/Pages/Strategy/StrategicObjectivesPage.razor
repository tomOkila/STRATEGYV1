@page "/managestrategicobjectives"
<PageTitle>STRATEGY | Strategic Objectives</PageTitle>
<div class="row">
    <div class="col-sm-12 mb-4 mb-xl-0">
        <h4 class="font-weight-bold text-dark">Manage Strategic Objectives</h4>
        <div style="float:right;">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="/home" Text="Home" />
                <RadzenBreadCrumbItem Text="Strategic Objectives" />
            </RadzenBreadCrumb>
        </div>
    </div>

</div>

<RadzenButton Text="Create" Click="CreateClicked" Icon="add" ButtonStyle="Radzen.ButtonStyle.Primary" Size="Radzen.ButtonSize.Small" Style="margin:10px;margin-left:5px;" />
<RadzenDataGrid id="mytable" AllowFiltering="true" AllowColumnResize="true"
                AllowAlternatingRows="false"
                AllowSorting="true"
                AllowMultiColumnSorting="true"
                PageSize="5"
                AllowPaging="true"
                ShowPagingSummary="true"
                SelectionMode="DataGridSelectionMode.Single"
                @bind-Value=@selectedStrategicObjective
                FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive"
                Data="@strategicObjectives"
                EmptyText="No strategic objective to display at the moment"
                TItem="StrategicObjective" Style="margin:5px;">
    <Columns>
        <RadzenDataGridColumn TItem="StrategicObjective" Property="SOId" Title="ID" Frozen="true" Width="20px" Visible="true" />
        <RadzenDataGridColumn TItem="StrategicObjective" Property="TargetName" Title="Name" Width="60px" />
        <RadzenDataGridColumn TItem="StrategicObjective" Property="Pillars.PillarName" Title="PillarName" Width="60px" />
        <RadzenDataGridColumn Context="strategicObjectives"
                              Filterable="false"
                              Sortable="false"
                              Width="60px"
                              TextAlign="Radzen.TextAlign.Center"
                              Frozen="true"
                              FrozenPosition="Radzen.FrozenColumnPosition.Right"
                              Title="Actions">
            <Template Context="strategicObjectives">
                <RadzenButton Icon="visibility" ButtonStyle="Radzen.ButtonStyle.Info" Variant="Radzen.Variant.Flat" Size="Radzen.ButtonSize.Small" Click="@(args =>ViewClicked(strategicObjectives))">
                </RadzenButton>
                <RadzenButton Icon="edit" ButtonStyle="Radzen.ButtonStyle.Primary" Variant="Radzen.Variant.Flat" Size="Radzen.ButtonSize.Small" Click="@(args =>EditClicked(strategicObjectives))">
                </RadzenButton>
                <RadzenButton Icon="delete" ButtonStyle="Radzen.ButtonStyle.Danger" Variant="Radzen.Variant.Flat" Size="Radzen.ButtonSize.Small" Click="@(args =>ViewDeleteClicked(strategicObjectives))">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
<ScriptPage></ScriptPage>

@code {
    private string SessionName = string.Empty;
    private string SessionEmail = string.Empty;
    private string CreateEditTitle = string.Empty;
    private int UserId;
    [CascadingParameter]
    public Task<AuthenticationState>? ClientAuthState { get; set; }


    StrategicObjective strategicObjective = new();
    List<StrategicObjective> strategicObjectives = new();
    IList<StrategicObjective> selectedStrategicObjective;


    Pillar pillar = new();
    List<Pillar> pillars = new();

    private async Task GetStrategicObjectives() => strategicObjectives = await strategyService.GetStrategicObjectivesAsync(UserId);
    private async Task GetPillars() => pillars = await strategyService.GetPillarAsync(UserId);


    protected override async Task OnInitializedAsync()
    {

        try
        {
            var user = (await ClientAuthState).User;
            SessionName = user.Identity.Name;
            SessionEmail = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value;
            UserId = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);

            //load system roles
            await GetStrategicObjectives();
            await GetPillars();

            selectedStrategicObjective = new List<StrategicObjective>() { strategicObjectives.FirstOrDefault() };
        }
        catch (Exception ex)
        {
            SessionName = null!;
            SessionEmail = null!;
        }

    }

    async Task Save()
    {
        strategicObjective.UpdatedBy = UserId;
        try
        {
            if (string.IsNullOrEmpty(strategicObjective.TargetName))
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"Please supply all strategic objective details before proceeding.", Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
                return;
            }


            var response = new GeneralResponse(false, null!);
            if (strategicObjective.SOId > 0)
                response = await strategyService.UpdateStrategicObjectivesAsync(strategicObjective);
            else
                response = await strategyService.CreateStrategicObjectivesAsync(strategicObjective);

            if (!response.Flag)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = response.Message, Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
                return;
            }
            else
            {
                DialogService1.Close();
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = response.Message, Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
                await GetStrategicObjectives();
                strategicObjective = new();
            }
        }
        catch (Exception ex)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ToString(), Detail = "", Duration = 7000, CloseOnClick = true, Payload = DateTime.Now });
            return;
        }


    }

    private void EditClicked(StrategicObjective inconStrategicObjective)
    {
        CreateEditTitle = "Edit";
        strategicObjective = inconStrategicObjective;
        ShowInlineDialog();
    }

    private void CreateClicked()
    {
        CreateEditTitle = "Create";
        strategicObjective = new();
        ShowInlineDialog();
    }

    private void ViewClicked(StrategicObjective inconStrategicObjective)
    {
        strategicObjective = inconStrategicObjective;
        ShowViewInlineDialog();
    }

    async Task ShowViewInlineDialog()
    {
        var result = await DialogService1.OpenAsync("Strategic Objectives Display", ds =>
    @<RadzenStack Gap="0.5rem" Style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif, 'Arial Narrow Bold', sans-serif;">
        <RadzenCard Variant=Variant.Filled Style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;font-size:13px;">
            <RadzenLabel><b>ID: </b> @strategicObjective.SOId</RadzenLabel>
            <br />
            <RadzenLabel><b>Target Name: </b> @strategicObjective.TargetName</RadzenLabel>
            <br />
            <RadzenLabel><b>Pillar Name: </b> @strategicObjective.Pillars.PillarName</RadzenLabel>
             <br />
            <RadzenLabel><b>Goal Score Date: </b> @strategicObjective.GoalScoreDate</RadzenLabel>
            <br />
            <RadzenLabel><b>Goal Scorer Name: </b> @strategicObjective.GoalScorerName</RadzenLabel>
        </RadzenCard>
        <hr />

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Cancel" Icon="cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" />
            </RadzenStack>

        </RadzenStack>
    </RadzenStack>);
    }



    private void ViewDeleteClicked(StrategicObjective inconStrategicObjective)
    {
        strategicObjective = inconStrategicObjective;
        ShowInlineDeleteTaskDialog();
    }

    async Task ShowInlineDeleteTaskDialog()
    {
        var result = await DialogService1.OpenAsync("Delete Strategic Objective? ", ds =>
    @<RadzenStack Gap="0.1rem">
        <p style="font-size:20px;">TargetName: <b>@strategicObjective.TargetName</b></p>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Secondary" Click="@(args =>DeleteClicked(strategicObjective))" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" Icon="cancel" ButtonStyle="ButtonStyle.Primary" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );
    }



    public int DeleteId { get; set; }
    private async Task DeleteClicked(StrategicObjective appStrategicObjective)
    {
        var response = await strategyService.DeleteStrategicObjectivesAsync(appStrategicObjective);
        await GetStrategicObjectives();
        DeleteId = 0;
        StateHasChanged();
        DialogService1.Close();
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = response.Message, Detail = "", Duration = 2000, CloseOnClick = true, Payload = DateTime.Now });
    }


    async Task ShowInlineDialog()
    {
        var result = await DialogService1.OpenAsync(CreateEditTitle + " Strategic Objective", ds =>
@<RadzenStack>
        <RadzenTemplateForm TItem="StrategicObjective" Data=strategicObjective Submit="Save" InvalidSubmit="OnInvalidSubmit">
            <RadzenStack>
                <RadzenFormField Text="Target Name" Variant="Variant.Outlined">
                    <ChildContent>
                        <RadzenTextBox Name="TargetName" @bind-Value=strategicObjective.TargetName />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="TargetName" Text="Target Name is required." />
                    </Helper>
                </RadzenFormField>
                <!--Dropdown Input Field-->
                <RadzenDropDown Data=@pillars
                                @bind-Value=strategicObjective.PillarId
                                TextProperty="PillarName"
                                AllowFiltering="true"
                                FilterAsYouType="true"
                                FilterPlaceholder="Select Pillar"
                                Placeholder="Select Pillar"
                                ValueProperty="PillarID"
                                Name="PillarName">
                </RadzenDropDown>
                <RadzenRequiredValidator DefaultValue="0" Style="padding-left:12px;margin:0px;padding-top:0px;" Component="PillarName" Text="Pillar Name is required." />

                <RadzenFormField Text="GoalScore Date" Variant="Variant.Outlined">
                    <ChildContent>
                        <RadzenDatePicker @bind-Value=strategicObjective.GoalScoreDate Name="GoalScoreDate" AllowClear="true" ShowButton="false" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="GoalScoreDate" Text="GoalScore Date is required." />
                    </Helper>
                </RadzenFormField>

                <RadzenFormField Text="GoalScorer Name" Variant="Variant.Outlined">
                    <ChildContent>
                        <RadzenTextBox Name="GoalScorerName" @bind-Value=strategicObjective.GoalScorerName />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="GoalScorerName" Text="GoalScorer Name is required." />
                    </Helper>
                </RadzenFormField>

              
                <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
            </RadzenStack>
        </RadzenTemplateForm>
    </RadzenStack>);
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}", Detail = "", Duration = 2000, CloseOnClick = true, Payload = DateTime.Now });
    }

    void ShowNotification(Radzen.NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
